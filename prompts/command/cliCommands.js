const LINT = (programmingLanguage) => `The task is to correct linting of ${programmingLanguage} code and return the updated code. Response should only have updated code, no other text should be in the response. \n code: \n`;
const OPTIMIZE = (programmingLanguage) => `The task is to optimize ${programmingLanguage} code and return the updated code. Requirements for optimization are(text delimitedby double quotes and each point seperated by semicolon): "Improve time and space complexity;Minimize the number of iterations and operations within loops;Optimize searching, insertion, deletion, and retrieval if any by choosing the right data structures;Implement caching mechanisms to store and reuse computed results;utilize asynchronous programming techniques, such as callbacks, promises, or async / await, to avoid blocking and increase concurrency;Optimize database queries, use appropriate indexes, minimize round trips, and consider data denormalization when necessary;manage memory by deallocating unused objects or resources, avoiding memory leaks, and minimizing unnecessary memory allocations;Identify tasks that can be executed concurrently and utilize parallel processing or threading to distribute the workload;Minimize disk I / O and network requests by batching operations, implementing caching, or using more efficient I / O techniques;eliminate duplicated code to improve code maintainability, readability, and reduce the chances of introducing bugs;". After optimization done, go over the new code and add comments for each change, make sure existing code purpose is not changed. Response should only have updated code, no other text should be in the response. \n code: \n`;
const REFACTOR = (programmingLanguage) => `The task is to refactor ${programmingLanguage} code and return the updated code. Requirements for code refactor are(text delimited by double quotes and each point seperated by semicolon): "Update blocks of code that can be grouped into a separate function or method to improve readability and maintainability;Use meaningful and descriptive names for variables, functions, and classes to enhance code understandability;Identify duplicated code segments and extract them into reusable functions or modules to eliminate redundancy;Simplify complex or nested conditional statements by using techniques such as guard clauses, ternary operators, or switch statements;Replace hard-coded numbers or strings with named constants or configuration variables to improve code maintainability;Split large functions or methods into smaller, more focused units to improve code readability and ease of maintenance;Refactor deeply nested code blocks by using techniques like early returns, guard clauses, or extracting nested blocks into separate functions;Identify and remove any unused variables, functions, or imports to declutter the codebase;Simplify loops by eliminating unnecessary iterations, using higher-order functions like map, filter, and reduce, or utilizing appropriate iterator methods;Wrap complex conditional logic in well-named functions or classes to improve code readability and make the intent clear;Centralize error handling logic, use structured exception handling, or replace error-prone constructs with safer alternatives;Organize code into modular components and reduce interdependencies to achieve better encapsulation and maintainability;Ensure that comments and documentation accurately reflect the code's purpose, behavior, and usage;". After coderefactor is done, go over the new code and add comments for each change, make sure existing code purpose is not changed. Response should only have updated code, no other text should be in the response. \n code: \n`;
const REVIEW = (programmingLanguage) => `The task is to review ${programmingLanguage} code and return the updated code. Requirements for code review are(text delimited by double quotes and each point seperated by semicolon): "Ensure that the code is using meaningful variable and function names, consistent formatting;Consistent coding style and conventions throughout the code;Check if the code follows the principle of modularity and adheres to the Single Responsibility Principle(SRP), where each function or class has a clear and focused purpose; Verify that the code includes proper error handling and gracefully handles exceptions or error conditions;Assess the code for any potential performance bottlenecks or inefficiencies; Consider whether the code is designed to be scalable and easily extensible, allowing for future changes and additions without significant rework;Review the code for potential security vulnerabilities, such as input validation, data sanitization, and protection against common security threats like SQL injection or cross-site scripting (XSS);Identify and remove any duplicated code;Examine the code for external dependencies and libraries, ensuring they are used appropriately and securely, and that license compliance is maintained;Look for code smells, such as long functions, excessive complexity, tight coupling, or violation of SOLID principles, and refactor for code smells;Assess if the code adheres to established coding standards, best practices, and industry-specific guidelines;". After review is done, go over the new code and add comments for each change, make sure existing code purpose is not changed. Response should only have updated code, no other text should be in the response. \n code: \n`;
const ERROR_HANDLING = (programmingLanguage) => `The task is to update ${programmingLanguage} code with error handling and return the updated code. Requirements for writing error handling code are(text delimited by double quotes and each point seperated by semicolon): "Choose the appropriate exception types based on the nature of the error;Use built-in exception types or create custom exceptions when necessary;Provide clear and informative error messages that help developers and end users understand the issue and take appropriate action;Avoid revealing sensitive information in error messages;Log relevant error details, including error messages, stack traces, timestamps, and any contextual information that can assist in troubleshooting and debugging;Wrap code segments that may raise exceptions in appropriate try-catch blocks.Catch specific exception types and handle them accordingly;Avoid using catch-all blocks without proper handling logic;Decide whether to handle an exception locally or propagate it to higher-level functions or layers based on the responsibility and context. Handle exceptions at the appropriate level;Implement graceful degradation when appropriate, allowing the application to continue functioning with reduced functionality or alternative paths in the event of errors;Validate user inputs and external data to prevent or mitigate potential errors, such as data type mismatches, null values, or buffer overflows;Use defensive programming techniques to anticipate and handle potential errors or edge cases.Check for preconditions, validate inputs, and include appropriate fallback mechanisms;Implement error recovery mechanisms to gracefully recover from errors and restore the application to a stable state.Rollback transactions, release resources, or take appropriate corrective actions;Write unit tests that cover error scenarios and exceptions to ensure that the code handles them correctly;Identify critical errors early and abort operations to prevent further damage or incorrect results;". After error handling code is done, go over the new code and add comments for each change, make sure existing code purpose is not changed. Response should only have updated code, no other text should be in the response.\n code: \n`;
const GENERATE_DOC = (programmingLanguage) => `The task is to write documentation for ${programmingLanguage} code and return the updated code with full documentation. Requirements for writing documentation are(text delimited by double quotes and each point seperated by semicolon): "write inline comments to explain complex code logic, clarify the purpose of variables or functions, and provide insights into the code's behavior;For each function or method write a clear description of its purpose, expected inputs, outputs, and any side effects.Include parameter descriptions and specify the return value or exceptions thrown, if applicable;Provide an overview of classes or modules, explaining their responsibilities, relationships, and dependencies.Document public interfaces and usage guidelines;If the code exposes an API, create thorough documentation that explains the endpoints, expected request and response formats, authentication requirements, and error handling;Include code examples to illustrate how to use specific functions, methods, or classes.Show typical usage patterns and provide explanations for different scenarios;Create tutorials or guides to demonstrate how to use code or specific features;Document the dependencies code relies on, including version numbers and any specific configuration or setup required;Document any naming conventions or coding style guidelines that are specific to the code;Explain the rationale behind the conventions and provide examples for clarity;Document significant design decisions, architectural choices, or trade-offs found the code.Explain the reasoning behind these decisions;Include real-world usage examples to demonstrate how your code solves specific problems or integrates with other systems or frameworks;". After writing documentation is done, go over the documentation, make sure each requirement is met. Response should only have documentation, no other text or code should be in the response. \n code: \n`;
// const GENERATE_UNIT_TEST = (programmingLanguage) => `The task is to write unit test cases for ${programmingLanguage} code and return the test code. Requirements for writing unit tests are(text delimited by double quotes and each point seperated by semicolon): "Design test cases to cover different code paths, including boundary conditions, edge cases, and error scenarios;Consider equivalence partitioning, boundary value analysis, and condition coverage;Structure each test case using the Arrange-Act-Assert (AAA) pattern. Arrange the necessary preconditions, act on the code under test, and assert the expected outcomes or behaviors; Aim for high test coverage by ensuring that your tests exercise as much of the code as possible. Strive for coverage of critical branches, conditionals, and error-handling paths;Mock external services, databases, or other components to focus on the specific code being tested;Set up reusable test fixtures or test data that can be shared across multiple test cases;Use descriptive and meaningful names for test methods that reflect the behavior being tested. Organize tests into logical groups and use test suites for better organization and readability;Generate relevant test data programmatically or use data generation libraries to cover a wide range of scenarios. Include both typical and edge case inputs to thoroughly test the code;Ensure that each test is independent and does not rely on the state or output of other tests;Design tests to be executed in any order, as the execution order should not affect the test outcomes.Avoid writing tests that depend on specific execution order or test side effects;Write documentation that explain the test's intent, the scenario it covers, and any special considerations or assumptions;Capture and analyze test results, including pass / fail status, code coverage; each test case should cover one postive, one negative and all possible code paths;". After writing unit-tests is done, go over all the unit-tests and add comments for each test cases, make sure all requirements are met. Response should only have unit-tests code, no other text should be in the response. \n code: \n`;
const GENERATE_UNIT_TEST = (programmingLanguage) => `Write unit test cases for a ${programmingLanguage} code file. The task involves writing test code that meets the following requirements:
1. Remove all the comments from the code.
2. Each function found in the code file should have at least five test cases.
3. Aim for a minimum of 90% code coverage.
4. Each test case should be accompanied by code comments.

Please provide the unit test code that fulfills these requirements. The response should only contain the unit test code,  provide the code without explicitly mentioning the language.
code: \n`;
// const GENERATE_INTEGRATION_TEST = (programmingLanguage) => `TODO`;
const GENERATE_PERFORMANCE_PROFILING = (programmingLanguage) => `The task is to write code for generating performance profiling of ${programmingLanguage} code and return the code. Requirements for writing code for generating performance profiling are(text delimited by double quotes and each point seperated by semicolon): "Identify performance bottlenecks, these could be functions, loops, database queries, or network operations that have the potential to impact performance;Utilize profiling tools and libraries specific to ${programmingLanguage}. These tools should provide insights into CPU usage, memory consumption, network latency, or database query execution time and other performance metrics;Use built-in timing functions or external libraries that provide accurate and precise timing measurements of specific code sections;Use instrumentation profilers that modify the code to insert additional instructions for performance measurement. These profilers can provide more detailed information about function-level or line-level performance;Profile the code under various scenarios, including different input sizes, edge cases, and peak load conditions;". After profiling code is completed, go over the new code and add comments for each line, make all the requirements are met. Response should only have updated code, no other text should be in the response. \n code: \n`;
const SCAN_FOR_BUGS = (programmingLanguage) => `The task is to scan the ${programmingLanguage} code for potential bugs. Requirements for code scaning for bugs are(text delimited by double quotes and each point seperated by semicolon): "Analyze the code and look for logical errors, incorrect assumptions, and inconsistencies that may lead to bugs;Trace the flow of data through the code to identify any potential data manipulation or transformation issues.Ensure that data is properly handled, validated, and transformed as intended;Analyze the control flow of the code to identify potential issues related to branching, loops, and conditional statements.Look for missing or incorrect conditions, loop termination problems, or unintended control flow paths;Review how input data is received, validated, and processed within the code.Look for vulnerabilities related to input validation, sanitization, or encoding / decoding errors;Evaluate how errors and exceptions are handled within the code.Look for missing error checks, improper error recovery, or inadequate logging and reporting mechanisms;If the code involves concurrent or parallel execution, review the code for potential issues related to thread safety, race conditions, deadlocks, or resource conflicts;Review the code for proper resource acquisition, usage, and release.Check for missing or incorrect file, database, or memory resource handling that may lead to bugs or resource leaks;Evaluate the code's use of data structures and algorithms for potential performance or correctness issues. Look for inefficient or incorrect implementations that may introduce bugs;". Response should only have list of potential bugs or other code issues that my introduce bugs, no other text should be in the response. \n code: \n`;
const SECURITY_AUDIT = (programmingLanguage) => `The task is to perform a security code review of ${programmingLanguage} code. Requirements for security code review are(text delimited by double quotes and each point seperated by semicolon): "Look for vulnerabilities like weak password hashing, improper session management, or insufficient access controls;Check how the code handles user input and output.Look for potential security vulnerabilities such as SQL injection, cross - site scripting(XSS), or command injection due to inadequate input validation or output encoding;Review how the code validates and sanitizes user - supplied data.Ensure that input data is properly validated, sanitized, and used securely to prevent security issues like code injection or data corruption;Examine how cryptographic functions and algorithms are used in the code.Verify that encryption, hashing, and key management practices are implemented correctly and securely;Review how secure communication is implemented, especially when interacting with external systems or APIs.Check for the proper use of secure protocols(e.g., HTTPS), certificate validation, and protection against man-in-the-middle attacks;Assess how the code handles errors and exceptions. Look for proper error handling to prevent information disclosure, as well as appropriate logging and alerting mechanisms to detect and respond to security incidents;Examine how sessions are managed and maintained. Verify that session identifiers are securely generated, transmitted, and invalidated to prevent session-related vulnerabilities like session fixation or session hijacking;Assess how the code handles file uploads, access, or resource allocation. Look for vulnerabilities like path traversal, unrestricted file uploads, or improper handling of sensitive files or resources;Review the usage of third-party libraries and dependencies. Ensure they are up-to-date and free from known security vulnerabilities. Verify that the code correctly integrates and uses these dependencies securely;Apply threat modeling techniques to identify potential security threats and attack vectors specific to the code. Evaluate the code against these threats to ensure proper security mitigations are in place;". Response should only have list of potential security threats to the code, no other text should be in the response. \n code: \n`;
const CODE_COVERAGE = (programmingLanguage) => `The task is to perform code coverage analysis on ${programmingLanguage} code. The goal is to identify the number of lines of code that remain unexecuted when running all the test cases. The assumption is that the maximum input lengths are 10 characters. Please provide the response in JSON format with the following keys: "totalNumberOfLines" for the total number of lines, and "actualLines" for the number of lines that were not executed. The response should only include these key-value pairs without any additional text.`;

module.exports = {
    LINT,
    OPTIMIZE,
    GENERATE_UNIT_TEST,
    REFACTOR,
    SCAN_FOR_BUGS,
    SECURITY_AUDIT,
    GENERATE_PERFORMANCE_PROFILING,
    REVIEW,
    ERROR_HANDLING,
    GENERATE_DOC,
    CODE_COVERAGE
}